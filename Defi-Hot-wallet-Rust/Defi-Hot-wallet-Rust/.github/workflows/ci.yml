name: Rust CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "127.0.0.1,localhost"

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test:
    name: Test (${{ matrix.rust }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [ stable, beta, nightly ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Show disk and free space
        run: |
          df -h
          sudo rm -rf /home/runner/.cache || true
          sudo rm -rf /home/runner/.cargo/registry/cache || true
          df -h

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo (helper)
        uses: Swatinem/rust-cache@v2

      - name: Cache dependencies
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system deps (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev build-essential ca-certificates curl jq nasm

      - name: Fetch crates index (ensure full index)
        run: cargo fetch

      - name: Format check
        run: cargo fmt --all -- --check

      - name: Clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest

      - name: Run tests with nextest (default features)
        run: cargo nextest run --workspace --verbose

      - name: Run tests with nextest (all features)
        run: cargo nextest run --workspace --all-features --verbose

  patch_elliptic_curve_tools:
    name: "Test patch: elliptic-curve-tools"
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Run tests for patch crate
        run: |
          cd patches/elliptic-curve-tools
          cargo test --manifest-path Cargo.toml --verbose

  security:
    name: Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Install cargo-audit
        run: cargo install --locked cargo-audit
      - name: Audit
        run: cargo audit --deny warnings
      - name: Install cargo-deny
        run: cargo install --locked cargo-deny
      - name: Deny
        run: cargo deny check

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin --locked
      - name: Generate coverage report with tarpaulin
        run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out Xml --run-types Tests -- --workspace

  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Show disk and free space
        run: |
          df -h
          sudo rm -rf /home/runner/.cache || true
          sudo rm -rf /home/runner/.cargo/registry/cache || true
          df -h

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install deps (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev build-essential ca-certificates curl nasm

      - name: Install deps (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install -y openssl nasm make curl || powershell -c "Write-Host 'choco done'"

      - name: Install deps (macOS)
        if: matrix.os == 'macos-latest'
        run: brew update || true

      - name: Build release
        run: cargo build --release --verbose

      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest

      - name: Test release with nextest
        run: cargo nextest run --release --verbose

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: defi-wallet-${{ matrix.os }}
          if-no-files-found: warn
          path: |
            target/release/defi-wallet
            target/release/defi-wallet.exe
            target/release/wallet-cli
            target/release/wallet-cli.exe

  docker:
    name: Docker Image
    runs-on: ubuntu-latest
    needs: [ test, security ]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build image (no push by default)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            yinhang3377/defi-hot-wallet:latest
            yinhang3377/defi-hot-wallet:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: [ test, security, build ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Ensure jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Version
        id: version
        run: echo "version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')" >> $GITHUB_OUTPUT

      - name: Changelog
        id: changelog
        shell: bash
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then RANGE=""; else RANGE="${LAST_TAG}..HEAD"; fi
          git log --pretty=format:"- %s" $RANGE > CHANGELOG.txt

      - name: Prepare release notes
        shell: bash
        run: |
          {
            echo "## Changes in this release"
            cat CHANGELOG.txt
            echo
            echo "## Features"
            echo "- Quantum-safe encryption"
            echo "- Shamir secret sharing"
            echo "- Multi-signature support"
            echo "- High-performance Rust implementation"
            echo
            echo "## Download"
            echo "Download the appropriate binary for your platform from the assets below."
          } > release-notes.md

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: defi-wallet-*
          merge-multiple: true
          path: dist

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body_path: release-notes.md
          files: |
            dist/**/defi-wallet
            dist/**/defi-wallet.exe
            dist/**/wallet-cli
            dist/**/wallet-cli.exe
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ github.token }}