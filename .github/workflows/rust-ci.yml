name: Rust CI

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            feature-set: default
          - os: windows-latest
            feature-set: default
          - os: windows-latest
            feature-set: memlock
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
            components: rustfmt, clippy
      - name: Install extra cargo tools
        run: |
          cargo install cargo-outdated || true
        shell: bash
      - name: Check formatting
        run: cargo fmt --all -- --check
        shell: bash
      - name: Clippy (strict)
        if: ${{ matrix.feature-set == 'memlock' }}
        run: cargo clippy --all-targets --features memlock -- -D warnings
        shell: bash
      - name: Clippy (strict, default)
        if: ${{ matrix.feature-set != 'memlock' }}
        run: cargo clippy --all-targets -- -D warnings
        shell: bash
      - name: Build (memlock)
        if: ${{ matrix.feature-set == 'memlock' }}
        run: cargo build --workspace --features memlock
        shell: bash
      - name: Build (default)
        if: ${{ matrix.feature-set != 'memlock' }}
        run: cargo build --workspace
        shell: bash
      - name: Ensure deterministic test envs (feature-gated)
        run: |
          # Avoid committing plaintext test keys or toggles into workflows.
          # Use `--features test-env` when running tests that rely on deterministic
          # environment variables, or inject secrets via repository secrets as needed.
          echo "NOTE: Running tests; prefer --features test-env or repo secrets for keys"
        shell: bash
      - name: Tests (memlock)
        if: ${{ matrix.feature-set == 'memlock' }}
        run: cargo test --workspace --features memlock,test-env
        shell: bash
      - name: Tests (default)
        if: ${{ matrix.feature-set != 'memlock' }}
        run: cargo test --workspace --features test-env
        shell: bash
      - name: Outdated (non-blocking)
        run: cargo outdated || true
        shell: bash
      - name: Summary
        run: echo "CI matrix ${{ matrix.feature-set }} completed"
        shell: bash
