# language: yaml
name: Test (allow-warnings)

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # Do NOT set insecure placeholders here. Use the `test-env` feature or secrets
  # to provide any deterministic keys during CI. Keeping plaintext test keys in
  # workflows is insecure and may leak into logs/artifacts.
  CARGO_TERM_COLOR: always
  CARGO_TARGET_DIR: "defi-target"
  CARGO_NET_OFFLINE: "false"
  DATABASE_URL: sqlite://./wallets.db
  
jobs:
  test_allow_warnings:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust (stable) and add components
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Install system deps (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev build-essential ca-certificates curl nasm

      - name: Prepare test envs (feature-gated)
        shell: bash
        run: |
          # Tests that require a deterministic environment should run with
          # `--features test-env` and not rely on plaintext keys committed
          # into the workflow file. If secrets are required, use repository
          # secrets and inject them via proper workflow inputs (do not commit them).
          echo "NOTE: Running tests; use --features test-env when deterministic envs are needed"

      # The test setup file that programmatically injects WALLET_ENC_KEY and other
      # test defaults was removed to prevent insecure defaults from being
      # constructed inside CI. Tests that require deterministic environments
      # should run with `--features test-env` or be provided secrets via the
      # repository's Secrets configuration.

      - name: Format check (non-fatal)
        run: cargo fmt --all -- --check || true

      - name: Run full test suite (allow warnings)
        run: |
          # Run workspace tests feature-gated. Do NOT enable --all-features here
          # because some features may toggle insecure test defaults. Use the
          # `test-env` feature when deterministic test values are required.
          export BRIDGE_MOCK_FORCE_SUCCESS=1
          export BRIDGE_MOCK=1
          cargo test --workspace --jobs 2 --features test-env

      - name: Re-run the previously failing test with logs
        run: |
          # run the specific test file to gather logs and ensure the error reproduces (if present)
          export BRIDGE_MOCK_FORCE_SUCCESS=1
          export BRIDGE_MOCK=1
          cargo test --test api_handlers_tests --features test-env -- --nocapture || true

      - name: Upload test logs (if any)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: defi-target