# language: yaml
name: Test (allow-warnings)

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # Prefer a secret for real key; CI step can generate a deterministic key if needed.
  WALLET_ENC_KEY: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
  TEST_SKIP_DECRYPT: "1"
  BRIDGE_MOCK_FORCE_SUCCESS: "1"
  BRIDGE_MOCK: "1"
  CARGO_TERM_COLOR: always
  CARGO_TARGET_DIR: "defi-target"
  # Must be online to fetch crates like k256 in patched subcrates
  CARGO_NET_OFFLINE: "false"
  DATABASE_URL: sqlite://./wallets.db
  
jobs:
  test_allow_warnings:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust (stable) and add components
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Install system deps (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev build-essential ca-certificates curl nasm

      - name: Ensure a deterministic WALLET_ENC_KEY and test envs
        shell: bash
        run: |
          # Generate base64 32-byte zero key (portable)
          WALLET_KEY=$(awk 'BEGIN{for(i=0;i<32;i++) printf "\x00"}' | base64 -w0)
          echo "WALLET_ENC_KEY=${WALLET_KEY}" >> $GITHUB_ENV
          echo "TEST_SKIP_DECRYPT=1" >> $GITHUB_ENV
          echo "BRIDGE_MOCK_FORCE_SUCCESS=1" >> $GITHUB_ENV
          echo "BRIDGE_MOCK=1" >> $GITHUB_ENV
          # also export to current shell for immediate use
          export WALLET_ENC_KEY="${WALLET_KEY}"
          export TEST_SKIP_DECRYPT=1
          export BRIDGE_MOCK_FORCE_SUCCESS=1
          export BRIDGE_MOCK=1

      - name: Create small test setup file to set envs at test runtime
        run: |
          mkdir -p tests
          cat > tests/test_setup.rs <<'RUST'
          use base64::engine::general_purpose::STANDARD;
          use base64::Engine as _;
          use ctor::ctor;
          use std::env;
          #[ctor]
          fn test_setup() {
              // Ensure envs used by tests are present in runner (fallback if not in GITHUB_ENV)
              env::set_var("TEST_SKIP_DECRYPT", env::var("TEST_SKIP_DECRYPT").unwrap_or_else(|_| "1".into()));
              env::set_var("BRIDGE_MOCK_FORCE_SUCCESS", env::var("BRIDGE_MOCK_FORCE_SUCCESS").unwrap_or_else(|_| "1".into()));
              // If WALLET_ENC_KEY not present, create a valid base64 32-byte key
              let key = env::var("WALLET_ENC_KEY").unwrap_or_else(|_| {
                  let raw = vec![0u8; 32];
                  STANDARD.encode(&raw)
              });
              env::set_var("WALLET_ENC_KEY", key);
              eprintln!("test_setup: envs prepared");
          }
          RUST

      - name: Format check (non-fatal)
        run: cargo fmt --all -- --check || true

      - name: Run full test suite (allow warnings)
        run: |
          # Run workspace tests; do not fail on warnings because RUSTFLAGS allows them
          export BRIDGE_MOCK_FORCE_SUCCESS=1
          export BRIDGE_MOCK=1
          # Enable test-env feature to run src/test_env.rs ctor initializer
          cargo test --workspace --jobs 2 --features test-env --all-features

      - name: Re-run the previously failing test with logs
        run: |
          # run the specific test file to gather logs and ensure the error reproduces (if present)
          export BRIDGE_MOCK_FORCE_SUCCESS=1
          export BRIDGE_MOCK=1
          cargo test --test api_handlers_tests --features test-env --all-features -- --nocapture || true

      - name: Upload test logs (if any)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: defi-target