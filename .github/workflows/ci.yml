---
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: sqlite://./wallets.db
  # 确保系统级别完全无代理
  http_proxy: ""
  https_proxy: ""
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  all_proxy: ""
  ALL_PROXY: ""
  NO_PROXY: "crates.io,index.crates.io,github.com,rust-lang.org"

jobs:
  test:
    name: Test (${{ matrix.rust }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [stable, beta, nightly]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 浅克隆，避免历史问题

      # 直接取消任何历史/分支合并，重置状态
      - name: Fresh Git Setup (avoid history issues)
        run: |
          # 完全清理 Git 状态并重新初始化
          rm -rf .git
          git init
          git config --local user.name "GitHub CI"
          git config --local user.email "ci@github.actions"
          git add .
          git commit -m "Initial commit from CI"
          
          # 显示当前状态确认
          git status

      # 强力清除所有代理设置
      - name: Remove all proxy configurations
        run: |
          # 清除系统代理环境变量
          unset http_proxy https_proxy HTTP_PROXY HTTPS_PROXY all_proxy ALL_PROXY no_proxy NO_PROXY || true
          
          # 设置空代理环境变量
          echo "http_proxy=" >> $GITHUB_ENV
          echo "https_proxy=" >> $GITHUB_ENV
          echo "HTTP_PROXY=" >> $GITHUB_ENV
          echo "HTTPS_PROXY=" >> $GITHUB_ENV
          echo "all_proxy=" >> $GITHUB_ENV
          echo "ALL_PROXY=" >> $GITHUB_ENV
          echo "NO_PROXY=crates.io,index.crates.io,github.com,rust-lang.org" >> $GITHUB_ENV
          
          # 清除 Git 代理设置
          git config --global --unset http.proxy || true
          git config --global --unset https.proxy || true
          
          # 显示环境变量确认
          env | grep -i proxy || echo "No proxy variables found"

      # 确保 cargo 配置绝对干净并直接连接
      - name: Setup clean cargo configuration
        run: |
          # 确保目录存在
          mkdir -p $HOME/.cargo
          
          # 创建新的配置文件
          cat > $HOME/.cargo/config.toml << 'EOF'
          # CI cargo config - direct connections only
          [source.crates-io]
          registry = "https://github.com/rust-lang/crates.io-index"
          replace-with = "direct"
          
          [source.direct]
          registry = "https://github.com/rust-lang/crates.io-index"
          
          [net]
          git-fetch-with-cli = true
          
          [http]
          # 确保不使用代理
          check-revoke = false
          multiplexing = false
          debug = true
          EOF
          
          # 显示配置确认
          echo "--- Created clean cargo config:"
          cat $HOME/.cargo/config.toml

      # 安装 Rust
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      # 缓存 cargo
      - name: Cache cargo artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-

      # 格式化代码
      - name: Format code
        run: cargo fmt --all
        env:
          RUSTFLAGS: "-D warnings"
          http_proxy: ""
          https_proxy: ""
          HTTP_PROXY: ""
          HTTPS_PROXY: ""

      # 检查代码格式
      - name: Check formatting
        run: cargo fmt --all -- --check
        env:
          http_proxy: ""
          https_proxy: ""
          HTTP_PROXY: ""
          HTTPS_PROXY: ""

      # 获取依赖（直接使用 --offline 模式或强制直连）
      - name: Fetch dependencies
        run: |
          # 先尝试无网络更新
          cargo fetch --locked || true
          
          # 如果失败，强制使用直连方式
          CARGO_NET_GIT_FETCH_WITH_CLI=true cargo fetch --verbose
        env:
          http_proxy: ""
          https_proxy: ""
          HTTP_PROXY: ""
          HTTPS_PROXY: ""

      # Clippy 检查
      - name: Lint with clippy
        run: cargo clippy --all-targets -- -D warnings
        env:
          http_proxy: ""
          https_proxy: ""
          HTTP_PROXY: ""
          HTTPS_PROXY: ""

      # 构建项目
      - name: Build
        run: cargo build --verbose
        env:
          http_proxy: ""
          https_proxy: ""
          HTTP_PROXY: ""
          HTTPS_PROXY: ""

      # 运行测试
      - name: Test
        run: cargo test --verbose
        env:
          http_proxy: ""
          https_proxy: ""
          HTTP_PROXY: ""
          HTTPS_PROXY: ""
          DATABASE_URL: sqlite://./wallets.db

      # 安全审计
      - name: Security audit
        if: matrix.rust == 'stable'
        run: |
          # 尝试离线安装
          cargo install cargo-audit --force || \
            cargo install --git https://github.com/rustsec/rustsec cargo-audit --force
          
          cargo audit
        env:
          http_proxy: ""
          https_proxy: ""
          HTTP_PROXY: ""
          HTTPS_PROXY: ""

  build:
    name: Build Release
    runs-on: ubuntu-latest
    env:
      http_proxy: ""
      https_proxy: ""
      HTTP_PROXY: ""
      HTTPS_PROXY: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 浅克隆，避免历史问题

      # 直接取消任何历史/分支合并，重置状态
      - name: Fresh Git Setup (avoid history issues)
        run: |
          rm -rf .git
          git init
          git config --local user.name "GitHub CI"
          git config --local user.email "ci@github.actions"
          git add .
          git commit -m "Initial commit from CI"

      # 强力清除所有代理设置
      - name: Remove all proxy configurations
        run: |
          unset http_proxy https_proxy HTTP_PROXY HTTPS_PROXY all_proxy ALL_PROXY no_proxy NO_PROXY || true
          echo "http_proxy=" >> $GITHUB_ENV
          echo "https_proxy=" >> $GITHUB_ENV
          echo "HTTP_PROXY=" >> $GITHUB_ENV
          echo "HTTPS_PROXY=" >> $GITHUB_ENV
          echo "all_proxy=" >> $GITHUB_ENV
          echo "ALL_PROXY=" >> $GITHUB_ENV
          echo "NO_PROXY=crates.io,index.crates.io,github.com,rust-lang.org" >> $GITHUB_ENV
          
          git config --global --unset http.proxy || true
          git config --global --unset https.proxy || true

      # 确保 cargo 配置绝对干净并直接连接
      - name: Setup clean cargo configuration
        run: |
          mkdir -p $HOME/.cargo
          cat > $HOME/.cargo/config.toml << 'EOF'
          # CI cargo config - direct connections only
          [source.crates-io]
          registry = "https://github.com/rust-lang/crates.io-index"
          replace-with = "direct"
          
          [source.direct]
          registry = "https://github.com/rust-lang/crates.io-index"
          
          [net]
          git-fetch-with-cli = true
          
          [http]
          check-revoke = false
          multiplexing = false
          debug = true
          EOF

      # 安装 Rust
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt

      # 缓存 cargo
      - name: Cache cargo artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-stable-

      # 构建发布版本
      - name: Build release
        run: cargo build --release --verbose
        env:
          http_proxy: ""
          https_proxy: ""
          HTTP_PROXY: ""
          HTTPS_PROXY: ""
          DATABASE_URL: sqlite://./wallets.db

      # 覆盖率报告
      - name: Generate coverage report
        run: |
          # 尝试离线安装
          cargo install cargo-tarpaulin --force || \
            cargo install --git https://github.com/xd009642/tarpaulin cargo-tarpaulin --force
          
          cargo tarpaulin --out Html
        env:
          http_proxy: ""
          https_proxy: ""
          HTTP_PROXY: ""
          HTTPS_PROXY: ""
          DATABASE_URL: sqlite://./wallets.db