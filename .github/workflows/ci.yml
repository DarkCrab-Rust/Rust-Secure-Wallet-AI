name: CI

on:
  push:
    branches: [ main, master, archive-bridge-stub ]
  pull_request:
    branches: [ main, master ]
name: CI

on:
  push:
    branches: [ main, master, archive-bridge-stub ]
  pull_request:
    branches: [ main, master ]

jobs:
  policy-check:
    name: Repository policy checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Forbidden patterns scan
        run: |
          set -euo pipefail
          echo "Scanning repo for forbidden patterns (direct WALLET_ENC_KEY usage, unguarded println!, eprintln!, dbg!)"
          # Allow WALLET_ENC_KEY only in known test-only helpers and test constructors.
          # Exclude: tests/util.rs, src/test_env.rs, src/api/server.rs, docs/ and README.
          if git grep -n "WALLET_ENC_KEY" -- ':!tests/util.rs' ':!src/test_env.rs' ':!src/api/server.rs' ':!.github/' ':!README.md' | grep -v '^$' ; then
            echo "Forbidden direct WALLET_ENC_KEY usage found outside allowed files. Use tests::util::set_test_env() instead.";
            git grep -n "WALLET_ENC_KEY" -- ':!tests/util.rs' ':!src/test_env.rs' ':!src/api/server.rs' ':!.github/' ':!README.md' || true;
            exit 1;
          fi
          # Disallow obvious dev-print macros outside test files
          files=$(git ls-files '*.rs' | grep -v '^tests/' | grep -v '^.github/' || true)
          if [ -n "$files" ]; then
            if grep -nE "\bprintln!|\beprintln!|\bdbg!\(" $files; then
              echo "Found unguarded print macros in non-test code. Please remove or gate behind DEV_PRINT_SECRETS.";
              exit 1;
            fi
          fi

          # Disallow committed test artifacts like target_test_* (these should be in .gitignore)
          if git ls-files | grep -nE "(^|/)target_test_|target/.*/target_test_" >/dev/null 2>&1; then
            echo "Found committed test artifact files (target_test_*). Please remove them and add to .gitignore.";
            git ls-files | grep -nE "(^|/)target_test_|target/.*/target_test_" || true
            exit 1
          fi

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run cargo clippy
        run: |
          set -e
          # Run clippy without --all-features to avoid optional-dependency compile issues
          cargo clippy --all-targets -- -D warnings

  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run tests (deterministic test env)
        env:
          # Deterministic, test-only KEK (base64 of 32 zero bytes) and flags
          WALLET_ENC_KEY: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
          TEST_SKIP_DECRYPT: "1"
          ALLOW_BRIDGE_MOCKS: "1"
        run: |
          set -e
          cargo test --tests -- --nocapture

  cargo-audit:
    name: Dependency audit (cargo-audit)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cargo-audit
        run: |
          set -e
          cargo install cargo-audit --locked --force

      - name: Run cargo audit
        run: |
          set -e
          # Update advisory database then run audit
          cargo audit --version || true
          # The optional `pkcs11` crate (RUSTSEC-2022-0034) is used only behind the
          # `pkcs11-backend` feature. We intentionally ignore that advisory here
          # because the crate is optional; please review SECURITY_NOTES.md before
          # enabling the pkcs11-backend feature in production.
          cargo audit --ignore RUSTSEC-2022-0034