name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - release/*
  pull_request:
    branches:
      - main
  workflow_dispatch: # 手动触发

env:
  WALLET_ENC_KEY: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
  TEST_SKIP_DECRYPT: "1"
  BRIDGE_MOCK_FORCE_SUCCESS: "1"
  BRIDGE_MOCK: "1"
  CARGO_TERM_COLOR: always
  DATABASE_URL: sqlite://./wallets.db

jobs:
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
          override: true
      - name: Check code formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
          override: true
      - name: Run Clippy
        run: cargo clippy -- -D warnings

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Ensure deterministic test envs
        run: |
          echo "WALLET_ENC_KEY=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=" >> $GITHUB_ENV
          echo "TEST_SKIP_DECRYPT=1" >> $GITHUB_ENV
          echo "BRIDGE_MOCK_FORCE_SUCCESS=1" >> $GITHUB_ENV
          echo "BRIDGE_MOCK=1" >> $GITHUB_ENV
          echo "DATABASE_URL=sqlite://./wallets.db" >> $GITHUB_ENV
      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt,cargo
      - name: Fetch Rust dependencies
        run: cargo fetch
      - name: Run tests
        run: cargo test --workspace --jobs 2 --all-features
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: .

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Run Coverage
        run: cargo tarpaulin --out Xml --workspace --timeout 300 --engine llvm || echo "Coverage failed, continuing..."
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: tarpaulin-report.xml