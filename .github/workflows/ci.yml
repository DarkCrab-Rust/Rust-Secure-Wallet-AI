name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test (${{ matrix.rust }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [ stable, beta, nightly ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Inject proxy env (Linux/macOS)
        if: runner.os != 'Windows'
        env:
          HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
          HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}
          NO_PROXY: ${{ secrets.NO_PROXY }}
        run: |
          if [ -n "$HTTP_PROXY" ]; then
            echo "HTTP_PROXY=$HTTP_PROXY" >> $GITHUB_ENV
            echo "HTTPS_PROXY=$HTTPS_PROXY" >> $GITHUB_ENV
            echo "NO_PROXY=$NO_PROXY" >> $GITHUB_ENV
          fi

      - name: Inject proxy env (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
          HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}
          NO_PROXY: ${{ secrets.NO_PROXY }}
        run: |
          if ($env:HTTP_PROXY -and $env:HTTP_PROXY -ne '') {
            Add-Content -Path $env:GITHUB_ENV -Value "HTTP_PROXY=$env:HTTP_PROXY"
            Add-Content -Path $env:GITHUB_ENV -Value "HTTPS_PROXY=$env:HTTPS_PROXY"
            Add-Content -Path $env:GITHUB_ENV -Value "NO_PROXY=$env:NO_PROXY"
          }

      - name: Configure proxy (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ -n "${HTTP_PROXY}" ]; then
            git config --global http.proxy "${HTTP_PROXY}"
            git config --global https.proxy "${HTTPS_PROXY}"
            export http_proxy="${HTTP_PROXY}"
            export https_proxy="${HTTPS_PROXY}"
          fi

      - name: Configure proxy (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if ($env:HTTP_PROXY -and $env:HTTP_PROXY -ne '') {
            git config --global http.proxy $env:HTTP_PROXY
            git config --global https.proxy $env:HTTPS_PROXY
            $env:http_proxy = $env:HTTP_PROXY
            $env:https_proxy = $env:HTTPS_PROXY
          }

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.rust }}

      - name: Fetch crates (warm up)
        run: cargo fetch

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets -- -D warnings

      - name: Build
        run: cargo build --verbose

      - name: Test
        run: cargo test --verbose

  build:
    name: Build Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Inject proxy env (Linux/macOS)
        if: runner.os != 'Windows'
        env:
          HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
          HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}
          NO_PROXY: ${{ secrets.NO_PROXY }}
        run: |
          if [ -n "$HTTP_PROXY" ]; then
            echo "HTTP_PROXY=$HTTP_PROXY" >> $GITHUB_ENV
            echo "HTTPS_PROXY=$HTTPS_PROXY" >> $GITHUB_ENV
            echo "NO_PROXY=$NO_PROXY" >> $GITHUB_ENV
          fi

      - name: Inject proxy env (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
          HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}
          NO_PROXY: ${{ secrets.NO_PROXY }}
        run: |
          if ($env:HTTP_PROXY -and $env:HTTP_PROXY -ne '') {
            Add-Content -Path $env:GITHUB_ENV -Value "HTTP_PROXY=$env:HTTP_PROXY"
            Add-Content -Path $env:GITHUB_ENV -Value "HTTPS_PROXY=$env:HTTPS_PROXY"
            Add-Content -Path $env:GITHUB_ENV -Value "NO_PROXY=$env:NO_PROXY"
          }

      - name: Configure proxy (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ -n "${HTTP_PROXY}" ]; then
            git config --global http.proxy "${HTTP_PROXY}"
            git config --global https.proxy "${HTTPS_PROXY}"
            export http_proxy="${HTTP_PROXY}"
            export https_proxy="${HTTPS_PROXY}"
          fi

      - name: Configure proxy (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if ($env:HTTP_PROXY -and $env:HTTP_PROXY -ne '') {
            git config --global http.proxy $env:HTTP_PROXY
            git config --global https.proxy $env:HTTPS_PROXY
            $env:http_proxy = $env:HTTP_PROXY
            $env:https_proxy = $env:HTTPS_PROXY
          }

      - name: Install Rust toolchain (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt

      - name: Cache cargo (build job)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-build

      - name: Build release
        run: cargo build --release --verbose

  docker:
    name: Docker Image
    runs-on: ubuntu-latest
    needs: [ test, build ]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Inject proxy env (Linux/macOS)
        if: runner.os != 'Windows'
        env:
          HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
          HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}
          NO_PROXY: ${{ secrets.NO_PROXY }}
        run: |
          if [ -n "$HTTP_PROXY" ]; then
            echo "HTTP_PROXY=$HTTP_PROXY" >> $GITHUB_ENV
            echo "HTTPS_PROXY=$HTTPS_PROXY" >> $GITHUB_ENV
            echo "NO_PROXY=$NO_PROXY" >> $GITHUB_ENV
          fi

      - name: Inject proxy env (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
          HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}
          NO_PROXY: ${{ secrets.NO_PROXY }}
        run: |
          if ($env:HTTP_PROXY -and $env:HTTP_PROXY -ne '') {
            Add-Content -Path $env:GITHUB_ENV -Value "HTTP_PROXY=$env:HTTP_PROXY"
            Add-Content -Path $env:GITHUB_ENV -Value "HTTPS_PROXY=$env:HTTPS_PROXY"
            Add-Content -Path $env:GITHUB_ENV -Value "NO_PROXY=$env:NO_PROXY"
          }

      - name: Configure proxy (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ -n "${HTTP_PROXY}" ]; then
            git config --global http.proxy "${HTTP_PROXY}"
            git config --global https.proxy "${HTTPS_PROXY}"
            export HTTP_PROXY="${HTTP_PROXY}"
            export HTTPS_PROXY="${HTTPS_PROXY}"
            export http_proxy="${HTTP_PROXY}"
            export https_proxy="${HTTPS_PROXY}"
          fi

      - name: Configure proxy (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if ($env:HTTP_PROXY -and $env:HTTP_PROXY -ne '') {
            git config --global http.proxy $env:HTTP_PROXY
            git config --global https.proxy $env:HTTPS_PROXY
            $env:HTTP_PROXY = $env:HTTP_PROXY
            $env:HTTPS_PROXY = $env:HTTPS_PROXY
            $env:http_proxy = $env:HTTP_PROXY
            $env:https_proxy = $env:HTTPS_PROXY
          }

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (no push by default)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            yinhang3377/defi-hot-wallet:latest
            yinhang3377/defi-hot-wallet:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            "HTTP_PROXY=${{ env.HTTP_PROXY }}"
            "HTTPS_PROXY=${{ env.HTTPS_PROXY }}"
            "NO_PROXY=${{ env.NO_PROXY }}"