name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  WALLET_ENC_KEY: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
  TEST_SKIP_DECRYPT: "1"
  BRIDGE_MOCK_FORCE_SUCCESS: "1"
  BRIDGE_MOCK: "1"
  CARGO_TERM_COLOR: always
  DATABASE_URL: sqlite://./wallets.db

jobs:
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
          override: true
      - name: Check code formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  pre-commit-check:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    needs: format-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate project report
        run: |
          echo "# Project Structure Report" > project_report.md
          echo "## Rust files count" >> project_report.md
          find . -type f -name "*.rs" | wc -l | xargs -I{} echo "- Rust files: {}" >> project_report.md
          echo "## Core modules" >> project_report.md
          find ./src -type f -name "*.rs" | sort >> project_report.md
      - name: Upload project report
        uses: actions/upload-artifact@v4
        with:
          name: project-report
          path: project_report.md

  conflict-check:
    if: ${{ github.event_name == 'pull_request' }}
    name: Check for merge conflicts
    runs-on: ubuntu-latest
    needs: pre-commit-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - name: Check for merge conflicts
        run: |
          git fetch origin main
          # try normal merge, if it fails because of unrelated histories try with allow-unrelated-histories
          if git merge --no-commit --no-ff origin/main; then
            echo "merge check OK"
            git merge --abort
          else
            echo "Attempting merge with --allow-unrelated-histories"
            if git merge --no-commit --no-ff --allow-unrelated-histories origin/main; then
              echo "merge (allow-unrelated-histories) succeeded; aborting"
              git merge --abort
            else
              echo '::error ::Merge conflict detected with main branch.'
              exit 1
            fi
          fi

  test:
    name: Run tests
    runs-on: ubuntu-latest
    # Do not depend on conflict-check; rust-ci.yml covers push builds as well
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Ensure deterministic test envs (persist to runner)
        run: |
          echo "WALLET_ENC_KEY=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=" >> $GITHUB_ENV
          echo "TEST_SKIP_DECRYPT=1" >> $GITHUB_ENV
          echo "BRIDGE_MOCK_FORCE_SUCCESS=1" >> $GITHUB_ENV
          echo "BRIDGE_MOCK=1" >> $GITHUB_ENV
          echo "DATABASE_URL=sqlite://./wallets.db" >> $GITHUB_ENV
      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt,cargo
      - name: Fetch Rust dependencies (allow network)
        run: cargo fetch
      - name: Run tests
        run: cargo test --workspace --jobs 2 --all-features
      - name: Upload test results (placeholder)
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: .