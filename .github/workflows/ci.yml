---
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: sqlite://./wallets.db  # 遵循 copilot-instructions.md 中提到的默认数据库

jobs:
  test:
    name: Test (${{ matrix.rust }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [stable, beta, nightly]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 浅克隆，避免历史问题

      # 完全重置 Git 状态，避免历史合并问题
      - name: Reset Git repository
        run: |
          rm -rf .git
          git init
          git config --local user.name "GitHub CI"
          git config --local user.email "ci@github.actions"
          git add .
          git commit -m "Initial commit from CI"
          git status

      # 多源策略：配置多个镜像源，在 CI 中使用
      - name: Configure Cargo with multiple mirrors
        run: |
          mkdir -p $HOME/.cargo
          cat > $HOME/.cargo/config.toml << 'EOF'
          # CI cargo config with multiple mirrors for reliability
          [source.crates-io]
          registry = "https://github.com/rust-lang/crates.io-index"
          # 首选 TUNA 镜像，备选 USTC
          replace-with = "tuna"

          # 清华大学镜像
          [source.tuna]
          registry = "https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git"

          # 中科大镜像(备选)
          [source.ustc]
          registry = "https://mirrors.ustc.edu.cn/crates.io-index"
          
          # 字节镜像(备选)
          [source.bfsu]
          registry = "https://mirrors.bfsu.edu.cn/git/crates.io-index/"

          [net]
          git-fetch-with-cli = true
          retry = 3
          
          [http]
          # 增加超时和重试参数
          check-revoke = false
          timeout = 120
          low-speed-limit = 5
          low-speed-time = 20
          multiplexing = false
          EOF
          
          echo "=== Configured cargo with multiple mirrors ==="
          cat $HOME/.cargo/config.toml

      # 安装 Rust 工具链
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      # 缓存 cargo 构建产物
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-mirrors-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-mirrors-${{ matrix.rust }}-

      # 格式化代码
      - name: Format code
        run: cargo fmt --all
        env:
          RUSTFLAGS: "-D warnings"

      # 检查代码格式化
      - name: Check formatting
        run: cargo fmt --all -- --check

      # 获取依赖
      - name: Fetch dependencies
        run: |
          # 尝试使用第一个镜像源获取依赖
          cargo fetch --verbose || true
          
          # 如果失败，尝试切换到第二个镜像源
          if [ $? -ne 0 ]; then
            echo "First mirror failed, trying USTC mirror"
            sed -i 's/replace-with = "tuna"/replace-with = "ustc"/' $HOME/.cargo/config.toml
            cargo fetch --verbose || true
          fi
          
          # 如果仍然失败，尝试切换到第三个镜像源
          if [ $? -ne 0 ]; then
            echo "Second mirror failed, trying BFSU mirror"
            sed -i 's/replace-with = "ustc"/replace-with = "bfsu"/' $HOME/.cargo/config.toml
            CARGO_NET_GIT_FETCH_WITH_CLI=true cargo fetch --verbose
          fi

      # 代码静态分析
      - name: Lint with clippy
        run: cargo clippy --all-targets -- -D warnings

      # 构建
      - name: Build
        run: cargo build --verbose

      # 运行测试
      - name: Test
        run: cargo test --verbose
        env:
          DATABASE_URL: sqlite://./wallets.db

      # 安全审计
      - name: Security audit
        if: matrix.rust == 'stable'
        run: |
          # 尝试直接从 GitHub 安装审计工具（避免中间源）
          cargo install --git https://github.com/rustsec/rustsec cargo-audit --force || true
          
          cargo audit || echo "Security audit completed with warnings"

  build:
    name: Build Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 重置 Git 仓库
      - name: Reset Git repository
        run: |
          rm -rf .git
          git init
          git config --local user.name "GitHub CI"
          git config --local user.email "ci@github.actions"
          git add .
          git commit -m "Initial commit from CI"

      # 配置多镜像源
      - name: Configure Cargo with multiple mirrors
        run: |
          mkdir -p $HOME/.cargo
          cat > $HOME/.cargo/config.toml << 'EOF'
          # CI cargo config with multiple mirrors
          [source.crates-io]
          registry = "https://github.com/rust-lang/crates.io-index"
          replace-with = "tuna"

          [source.tuna]
          registry = "https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git"

          [source.ustc]
          registry = "https://mirrors.ustc.edu.cn/crates.io-index"
          
          [source.bfsu]
          registry = "https://mirrors.bfsu.edu.cn/git/crates.io-index/"

          [net]
          git-fetch-with-cli = true
          retry = 3
          
          [http]
          check-revoke = false
          timeout = 120
          low-speed-limit = 5
          low-speed-time = 20
          multiplexing = false
          EOF

      # 安装 Rust
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt

      # 缓存 cargo
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-mirrors-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-mirrors-release-

      # 构建发布版本
      - name: Build release
        run: cargo build --release --verbose
        env:
          DATABASE_URL: sqlite://./wallets.db

      # 覆盖率报告
      - name: Generate coverage report
        run: |
          # 尝试从 GitHub 直接安装
          cargo install --git https://github.com/xd009642/tarpaulin cargo-tarpaulin --force || true
          
          cargo tarpaulin --out Html || echo "Coverage report may be incomplete"
        env:
          DATABASE_URL: sqlite://./wallets.db